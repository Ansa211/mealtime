#!/usr/bin/php
=============== ananta.php =============
<?php
function ananta() {
    // ananta could follow suit of natureza (strip tags, lots of greps)
    global $dayOfWeek;

    $separators = array("PONDĚLÍ", "ÚTERÝ", "STŘEDA", "ČTVRTEK", "PÁTEK", "Menu");
    $sepA = $separators[$dayOfWeek];
    $sepB = $separators[$dayOfWeek+1];

    $page = new DOMDocument();
    $pageRaw = getURL('http://www.anantasesa.cz/tydenni-menu');
    // Sanitize HTML
    $pageRaw = str_replace(array("\r", "\n"), '', $pageRaw);
    @$page->loadHTML($pageRaw);
    $content = $page->getElementById('content')->C14N();

    preg_match('/.*' . $sepA . '<\/h2>(.*)' . $sepB . '.*/', $content, $menuDirty);
    $menuClean = $menuDirty[1];
    $menuClean = preg_replace('/<\/p><p>/', "<br>", $menuClean);
    $menuClean = preg_replace('/(<p>|<\/p>)/', "", $menuClean);
    $menuClean = preg_replace('/<\/?h\d>/', "", $menuClean);
    $menuClean = preg_replace('/<br><\/br>/', "<br>", $menuClean);
    $menuClean = preg_replace('/Jogurt<br>/', "Jogurt", $menuClean);

    return $menuClean;
}
?>

=============== cantina.php =============
<?php

function cantina() {
    global $dayOfWeek;
    
    $baseURL = "http://www.restauracecantina.cz";

    // Get the daily menu link from the website menu Cantina changes the link (almost?) every week
    $pageRaw = getURL($baseURL . "/lang/en/");
    $dom = new DomDocument();
    // The web is missing encoding header, so appends it manually.
    @$dom->loadHTML('<?xml encoding="utf-8" ?>' .  $pageRaw);
    $finder = new DomXPath($dom);
    $nodes = $finder->query("//span[contains(normalize-space(),'Daily offer')]/.. | //span[contains(normalize-space(),'POLEDNÍ MENU')]/..");

    if (is_null($nodes[0])) {
        throw new Exception("'Daily menu' menu entry not found");
    }

    $menuURL = $nodes[0]->getAttribute('href');

    // Get the daily/weekly menu
    $pageRaw = getURL($baseURL . $menuURL);

    $dom = new DomDocument();
    // The web is missing encoding header, so appends it manually.
    @$dom->loadHTML('<?xml encoding="utf-8" ?>' .  $pageRaw);
    $finder = new DomXPath($dom);
    $nodes = $finder->query("//div[@id='content']");
    
    // (the menu contains only UPPERCASE, which looks ugly)
    // Title-Case the diet titles
    $titles = $finder->query("//*[@class='dietTitle']/strong", $nodes[0]);
    foreach ($titles as $t) {
        $t->textContent = trim(mb_convert_case($t->textContent, MB_CASE_TITLE));
    }
    // And lowercase the ingredients 
    $ingredients = $finder->query("//*[@class='dietComposition']", $nodes[0]);
    foreach ($ingredients as $i) {
        $i->textContent = '(' . trim(mb_convert_case($i->textContent, MB_CASE_LOWER)) . ')';
    }
    
    $pageRaw = strip_tags($dom->saveHTML($nodes[0]));
    $pageRaw = str_replace(array("\n", "\r"), "<br>", $pageRaw);
    
    $separators = array("Pondělí", "Úterý", "Středa", "Čtvrtek", "Pátek", "");
    $sepA = $separators[$dayOfWeek];
    $sepB = $separators[$dayOfWeek+1];
    preg_match('/.*' . $sepA . '(.*)' . $sepB . '.*/iu', $pageRaw, $menuDirty);
    
    $menuClean = $menuDirty[1];
    
    // Remove the date
    $menuClean = preg_replace('/\d+\. *\d+\./', "", $menuClean);
    // Remove order ("1.", "2.", ...)
    $menuClean = preg_replace('/\d\. /', "", $menuClean);
    // Clean prices
    $menuClean = preg_replace('/\d+,- Kč<br>/iu', "", $menuClean);
    // Remove weight
    $menuClean = preg_replace('/\d+[gG]/', "", $menuClean);
    // Collapse newlines
    $menuClean = preg_replace('/<br>(<br>|\s)+/', "<br>", $menuClean);
    // Drop leading whitespace
    $menuClean = preg_replace('/^ *<br>/', "", $menuClean);
    // Remove footer
    $menuClean = preg_replace('/Informace o obsažených alergenech.*/iu', "", $menuClean);

    return $menuClean;
}

?>

=============== carmelita.php =============
<?php

function carmelita() {
    global $dayOfWeek;
    
    $pageRaw = getURL("http://www.restauracecarmelita.cz/poledni-nabidka-1/");
    $dom = new DomDocument();
    // The web is missing encoding header, so appends it manually.
    @$dom->loadHTML('<?xml encoding="utf-8" ? >' .  $pageRaw);
    $finder = new DomXPath($dom);
    $nodes = $finder->query("//div[@id='content']");

    $pageRaw = strip_tags($dom->saveHTML($nodes[0]));
    $pageRaw = str_replace(array("\n", "\r"), "<br>", $pageRaw);

    $separators = array("Pondělí", "Úterý", "Středa", "Čtvrtek", "Pátek", "");
    $sepA = $separators[$dayOfWeek];
    $sepB = $separators[$dayOfWeek+1];
    preg_match('/.*' . $sepA . '(.*)' . $sepB . '.*/', $pageRaw, $menuDirty);
    
    $menuClean = $menuDirty[1];
    
    $menuClean = preg_replace('/\d+\.\d+\./', "", $menuClean);

    // Remove order ("1.", "2.", ...)
    $menuClean = preg_replace('/\d\. ?/', "", $menuClean);
    // Clean prices
    $menuClean = preg_replace('/\d+,- Kč<br>/', "", $menuClean);
    $menuClean = preg_replace('/\d+g/', "", $menuClean);
    // Collapse newlines
    $menuClean = preg_replace('/<br>(<br>|\s)+/', "<br>", $menuClean);
    // Drop leading whitespace
    $menuClean = preg_replace('/^ *<br>/', "", $menuClean);
    // Remove footer
    $menuClean = preg_replace('/K polednimu menu nabízíme.*/iu', "", $menuClean);
    return $menuClean;
}

?>

=============== ferdinanda.php =============
<?php
function ferdinanda() {
    $pageRaw = getURL("http://www.ferdinanda.cz/cs/mala-strana/menu/denni-menu/main.html?ajax=1");
    $pageRaw = strip_tags($pageRaw);
    preg_match('/HLAVNÍ JÍDLA(.*)SALÁTY/', $pageRaw, $mainClean);
    $mainClean = $mainClean[1];
    // Entries end with the price
    $mainClean = preg_replace('/\d+&nbsp;Kč/', "\n", $mainClean);
    // Clean up weights
    $mainClean = preg_replace('/\d+g/', "", $mainClean);
    // Clean up leading spaces
    $mainClean = preg_replace('/^\s+/', "", $mainClean);
    // Clean up trailing spaces and newlines
    $mainClean = preg_replace('/[\s\n]+$/', "", $mainClean);
    return $mainClean;
}
?>

=============== hamu.php =============
<?php
function hamu() {
    global $dayOfWeek;
    
    $pageRaw = getURL("https://www.hamu.cz/cs/vse-o-fakulte/fakultni-kavarna/");
    $dom = new DomDocument();
    // The web is missing encoding header, so appends it manually.
    @$dom->loadHTML('<?xml encoding="utf-8" ? >' .  $pageRaw);
    $finder = new DomXPath($dom);
    $classname="wysiwyg";
    $nodes = $finder->query("//*[contains(concat(' ', normalize-space(@class), ' '), ' $classname ')]");
    
    $pageRaw = strip_tags($dom->saveHTML($nodes[0]));
    $pageRaw =str_replace(array("\n", "\r"), "<br>", $pageRaw);

    $separators = array("Pondělí", "Úterý", "Středa", "Čtvrtek", "Pátek", "");
    $sepA = $separators[$dayOfWeek];
    $sepB = $separators[$dayOfWeek+1];
    preg_match('/.*' . $sepA . '(.*)' . $sepB . '.*/', $pageRaw, $menuDirty);
    
    $menuClean = $menuDirty[1];
    // Clean prices and weights
    $menuClean = preg_replace('/\d+g<br>/', "", $menuClean);
    // Collapse newlines
    $menuClean = preg_replace('/<br>(<br>|\s)+/', "<br>", $menuClean);
    // Some special two-char symbols
    $menuClean = preg_replace('/<br>..<br>/', "", $menuClean);
    // Drop prices
    $menuClean = preg_replace('/(<br>|\d|\.)(,|\.)-/', "\n", $menuClean);
    // Remove leading <br>s
    $menuClean = preg_replace('/<br>/', "", $menuClean);
    // Drop digits
    $menuClean = preg_replace('/\d(\d|,)*/', "", $menuClean);
    // Drop leading space
    $menuClean = preg_replace('/^[^a-zA-Z]+/', "", $menuClean);
    // Drop lines without letters
    $menuClean = preg_replace('/^[^a-zA-Z]*$/', "", $menuClean);

    return $menuClean;
}
?>

=============== menza_arnost.php =============
<?php
function menza_arnost() {
    global $dayOfWeek;
    
    $pageRaw = file_get_contents(
        "https://kamweb.ruk.cuni.cz/webkredit/Api/Ordering/Menu?Dates=" . date("Y-m-d") . "&CanteenId=5"
    );
    $obj = json_decode($pageRaw);
    $out = "";
    
    $outArr = array();

    foreach($obj->groups[1]->rows as $group) {
        $mealName = $group->item->mealName;
        $price = $group->item->price;
        $available = $group->item->countAvailable;
        
        if(strpos(strtolower($mealName), "vegan") !== false) {
            $mealName = $mealName . " 🌿";
        }
        array_push($outArr, $mealName . " (" . $available . ' left, ' . $price . " Kč)");
    }
    $out = implode("<br>", $outArr);

    return $out;
}
?>

=============== natureza.php =============
<?php
// deprecated
function natureza_plain() {
    global $dayOfWeek;

    $childIndex = array(1, 4, 7, 10, 13)[$dayOfWeek];
    $page = new DOMDocument();
    $pageRaw = getURL('https://naturezaveget.cz/cs/o-nas');
    $pageRaw = strip_tags($pageRaw);
    $pageRaw = str_replace(array("\n", "\r", "\t"), '<br>', $pageRaw);
    $pageRaw = preg_replace('/(<br>)+/', "<br>", $pageRaw);

    // It is almost guaranteed that the <br>D<br> will break. For debugging
    // echo $pageRaw and see what the current situation looks like.
    // -zouharvi 23 Aug 2019

    $separators = array("Pondělí, \d+ [^\s]+", "Úterý, \d+ [^\s]+", "Středa, \d+ [^\s]+", "Čtvrtek, \d+ [^\s]+", "Pátek, \d+ [^\s]+", "D<br>");
    $sepA = $separators[$dayOfWeek];
    $sepB = $separators[$dayOfWeek+1];
    preg_match('/.*' . $sepA . '(\s|<br>)+(.*)<br>\s*' . $sepB . '.*/', $pageRaw, $menuDirty);
    $menuClean = preg_replace("/(<br>|\s|&nbsp;)+<br>/", "<br>", $menuDirty[2]);
    $menuClean = preg_replace("/<br>/", "\n", $menuClean);
    $menuClean = preg_replace("/[\n]+/", "\n", $menuClean);
    
    // Tmp hack to drop empty lines full of random white characters, \s does not match them
    $tmp = explode("\n", $menuClean);
    $result = '';
    foreach($tmp as $i) {
        if (strlen($i) < 150) {
            $result = $result . "\n" . $i;
        }
    }
    return $result;
}

function natureza() {
    $key = file_get_contents('zomato.key');
    $key = preg_replace('/\n$/', '', $key);

    $opts = [
        "http" => [
            "method" => "GET",
            "header" => "Accept: application/json\r\n" .
                        "user_key: " . $key
        ]
    ];
    $context = stream_context_create($opts);

    $menuJSON = getURL("https://developers.zomato.com/api/v2.1/dailymenu?res_id=16507635", false, $context); 
    $menu = json_decode($menuJSON)->daily_menus;
    if (count($menu) < 1) {
        return 'Not available';
    }
    $menu = $menu[0]->daily_menu->dishes;
    $dishes = array();
    foreach($menu as $dish) {
        $food = $dish->dish->name;
        $food = preg_replace('/\d\d+/', '', $food);
        array_push($dishes, $food);  
    }
    return implode("\n", $dishes);
}
?>

=============== profdum.php =============
<?php
function profdum() {
    /* Zomato requires API key, so here it is. This is actually quite sane were it not for the auth key
     * complications and the 1000 requests per day limits.
     * -zouharvi 23 Aug 2019
     */
    $key = file_get_contents('zomato.key');
    $key = preg_replace('/\n$/', '', $key);

    $opts = [
        "http" => [
            "method" => "GET",
            "header" => "Accept: application/json\r\n" .
                        "user_key: " . $key
        ]
    ];
    $context = stream_context_create($opts);

    $menuJSON = getURL("https://developers.zomato.com/api/v2.1/dailymenu?res_id=16506988", false, $context); 
    $menu = json_decode($menuJSON)->daily_menus;
    if (count($menu) < 1) {
        return 'Not available';
    }
    $menu = $menu[0]->daily_menu->dishes;
    $dishes = array();
    foreach($menu as $dish) {
        $food = $dish->dish->name;
        $food = preg_replace('/\d\d+/', '', $food);
        array_push($dishes, $food);  
    }
    return implode("\n", $dishes);
}

function profdum_plain() {
    // Broken for days other than mondays
    // not used anyway, since Zomato is somewhat more reliable
    global $dayOfWeek;
    
    $pageRaw = getURL("http://www.ms.mff.cuni.cz/profdum/jidelnicek.htm");
    $pageRaw = iconv('windows-1250', 'utf-8', $pageRaw);
    $pageRaw = strip_tags($pageRaw);
    $pageRaw = str_replace(array("\n", "\r"), "<br>", $pageRaw);
    $pageRaw = str_replace('&nbsp;', ' ', $pageRaw);
    $pageRaw = preg_replace('/\s+/', ' ', $pageRaw);

    $separators = array("Pondělí", "Úterý", "Středa", "Čtvrtek", "Pátek", "");
    $sepA = $separators[$dayOfWeek];
    $sepB = $separators[$dayOfWeek+1];
    preg_match('/.*' . $sepA . '.*<br><br> <br><br>(.*)<br><br> <br><br>.*' . $sepB . '.*/', $pageRaw, $menuDirty);

    $menuClean = $menuDirty[1];

    // Clean prices and weights
    $menuClean = preg_replace('/\d+g<br>/', "", $menuClean);
    // Collapse newlines
    $menuClean = preg_replace('/<br>(<br>|\s)+/', "<br>", $menuClean);
    // Drop prices
    $menuClean = preg_replace('/(<br>|\d|\.)(,|\.)-/', "\n", $menuClean);
    // Remove leading <br>s
    $menuClean = preg_replace('/<br>/', "", $menuClean);
    // Remove grs
    $menuClean = preg_replace('/gr/', "", $menuClean);
    // Drop digits
    $menuClean = preg_replace('/\d(\d|,)*/', "", $menuClean);
    // Drop leading space
    $menuClean = preg_replace('/^[^a-zA-Z]+/', "", $menuClean);
    $menuClean = preg_replace('/\n[^a-zA-Z]+/', "\n", $menuClean);

    return $menuClean;
}
?>

